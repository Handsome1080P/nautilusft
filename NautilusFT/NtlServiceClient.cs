//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName = "IReaderService")]
public interface IReaderService
{

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IReaderService/ImageBaseAddressRemote", ReplyAction = "http://tempuri.org/IReaderService/ImageBaseAddressRemoteResponse")]
    System.IntPtr ImageBaseAddressRemote(string dllname);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IReaderService/ImageBaseAddressRemote", ReplyAction = "http://tempuri.org/IReaderService/ImageBaseAddressRemoteResponse")]
    System.Threading.Tasks.Task<System.IntPtr> ImageBaseAddressRemoteAsync(string dllname);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IReaderService/CloseTargetProcessRemote", ReplyAction = "http://tempuri.org/IReaderService/CloseTargetProcessRemoteResponse")]
    void CloseTargetProcessRemote();

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IReaderService/CloseTargetProcessRemote", ReplyAction = "http://tempuri.org/IReaderService/CloseTargetProcessRemoteResponse")]
    System.Threading.Tasks.Task CloseTargetProcessRemoteAsync();

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IReaderService/OpenTargetProcessRemote", ReplyAction = "http://tempuri.org/IReaderService/OpenTargetProcessRemoteResponse")]
    OpenTargetProcessRemoteResponse OpenTargetProcessRemote(OpenTargetProcessRemoteRequest request);

    // CODEGEN: Generating message contract since the operation has multiple return values.
    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IReaderService/OpenTargetProcessRemote", ReplyAction = "http://tempuri.org/IReaderService/OpenTargetProcessRemoteResponse")]
    System.Threading.Tasks.Task<OpenTargetProcessRemoteResponse> OpenTargetProcessRemoteAsync(OpenTargetProcessRemoteRequest request);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IReaderService/ReadProcessMemoryRemote", ReplyAction = "http://tempuri.org/IReaderService/ReadProcessMemoryRemoteResponse")]
    ReadProcessMemoryRemoteResponse ReadProcessMemoryRemote(ReadProcessMemoryRemoteRequest request);

    // CODEGEN: Generating message contract since the operation has multiple return values.
    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IReaderService/ReadProcessMemoryRemote", ReplyAction = "http://tempuri.org/IReaderService/ReadProcessMemoryRemoteResponse")]
    System.Threading.Tasks.Task<ReadProcessMemoryRemoteResponse> ReadProcessMemoryRemoteAsync(ReadProcessMemoryRemoteRequest request);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IReaderService/WriteProcessMemoryRemote", ReplyAction = "http://tempuri.org/IReaderService/WriteProcessMemoryRemoteResponse")]
    WriteProcessMemoryRemoteResponse WriteProcessMemoryRemote(WriteProcessMemoryRemoteRequest request);

    // CODEGEN: Generating message contract since the operation has multiple return values.
    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IReaderService/WriteProcessMemoryRemote", ReplyAction = "http://tempuri.org/IReaderService/WriteProcessMemoryRemoteResponse")]
    System.Threading.Tasks.Task<WriteProcessMemoryRemoteResponse> WriteProcessMemoryRemoteAsync(WriteProcessMemoryRemoteRequest request);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IReaderService/HasActiveHandleRemote", ReplyAction = "http://tempuri.org/IReaderService/HasActiveHandleRemoteResponse")]
    bool HasActiveHandleRemote();

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IReaderService/HasActiveHandleRemote", ReplyAction = "http://tempuri.org/IReaderService/HasActiveHandleRemoteResponse")]
    System.Threading.Tasks.Task<bool> HasActiveHandleRemoteAsync();
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.MessageContractAttribute(WrapperName = "OpenTargetProcessRemote", WrapperNamespace = "http://tempuri.org/", IsWrapped = true)]
public partial class OpenTargetProcessRemoteRequest
{

    [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 0)]
    public string processName;

    [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 1)]
    public System.IntPtr targetProcessHandle;

    [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 2)]
    public int pID;

    public OpenTargetProcessRemoteRequest()
    {
    }

    public OpenTargetProcessRemoteRequest(string processName, System.IntPtr targetProcessHandle, int pID)
    {
        this.processName = processName;
        this.targetProcessHandle = targetProcessHandle;
        this.pID = pID;
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.MessageContractAttribute(WrapperName = "OpenTargetProcessRemoteResponse", WrapperNamespace = "http://tempuri.org/", IsWrapped = true)]
public partial class OpenTargetProcessRemoteResponse
{

    [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 0)]
    public System.IntPtr targetProcessHandle;

    [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 1)]
    public int pID;

    public OpenTargetProcessRemoteResponse()
    {
    }

    public OpenTargetProcessRemoteResponse(System.IntPtr targetProcessHandle, int pID)
    {
        this.targetProcessHandle = targetProcessHandle;
        this.pID = pID;
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.MessageContractAttribute(WrapperName = "ReadProcessMemoryRemote", WrapperNamespace = "http://tempuri.org/", IsWrapped = true)]
public partial class ReadProcessMemoryRemoteRequest
{

    [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 0)]
    public int processHandle;

    [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 1)]
    public long processBaseAddress;

    [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 2)]
    public byte[] biffer;

    [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 3)]
    public int size;

    [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 4)]
    public int numberOfBytesRead;

    public ReadProcessMemoryRemoteRequest()
    {
    }

    public ReadProcessMemoryRemoteRequest(int processHandle, long processBaseAddress, byte[] biffer, int size, int numberOfBytesRead)
    {
        this.processHandle = processHandle;
        this.processBaseAddress = processBaseAddress;
        this.biffer = biffer;
        this.size = size;
        this.numberOfBytesRead = numberOfBytesRead;
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.MessageContractAttribute(WrapperName = "ReadProcessMemoryRemoteResponse", WrapperNamespace = "http://tempuri.org/", IsWrapped = true)]
public partial class ReadProcessMemoryRemoteResponse
{

    [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 0)]
    public byte[] biffer;

    [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 1)]
    public int numberOfBytesRead;

    public ReadProcessMemoryRemoteResponse()
    {
    }

    public ReadProcessMemoryRemoteResponse(byte[] biffer, int numberOfBytesRead)
    {
        this.biffer = biffer;
        this.numberOfBytesRead = numberOfBytesRead;
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.MessageContractAttribute(WrapperName = "WriteProcessMemoryRemote", WrapperNamespace = "http://tempuri.org/", IsWrapped = true)]
public partial class WriteProcessMemoryRemoteRequest
{

    [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 0)]
    public int processHandle;

    [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 1)]
    public long processBaseAddress;

    [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 2)]
    public byte[] biffer;

    [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 3)]
    public int size;

    [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 4)]
    public int numberOfBytesWritten;

    public WriteProcessMemoryRemoteRequest()
    {
    }

    public WriteProcessMemoryRemoteRequest(int processHandle, long processBaseAddress, byte[] biffer, int size, int numberOfBytesWritten)
    {
        this.processHandle = processHandle;
        this.processBaseAddress = processBaseAddress;
        this.biffer = biffer;
        this.size = size;
        this.numberOfBytesWritten = numberOfBytesWritten;
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.MessageContractAttribute(WrapperName = "WriteProcessMemoryRemoteResponse", WrapperNamespace = "http://tempuri.org/", IsWrapped = true)]
public partial class WriteProcessMemoryRemoteResponse
{

    [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 0)]
    public byte[] biffer;

    [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 1)]
    public int numberOfBytesWritten;

    public WriteProcessMemoryRemoteResponse()
    {
    }

    public WriteProcessMemoryRemoteResponse(byte[] biffer, int numberOfBytesWritten)
    {
        this.biffer = biffer;
        this.numberOfBytesWritten = numberOfBytesWritten;
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IReaderServiceChannel : IReaderService, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class ReaderServiceClient : System.ServiceModel.ClientBase<IReaderService>, IReaderService
{

    public ReaderServiceClient()
    {
    }

    public ReaderServiceClient(string endpointConfigurationName) :
            base(endpointConfigurationName)
    {
    }

    public ReaderServiceClient(string endpointConfigurationName, string remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
    {
    }

    public ReaderServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
    {
    }

    public ReaderServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
            base(binding, remoteAddress)
    {
    }

    public System.IntPtr ImageBaseAddressRemote(string dllname)
    {
        return base.Channel.ImageBaseAddressRemote(dllname);
    }

    public System.Threading.Tasks.Task<System.IntPtr> ImageBaseAddressRemoteAsync(string dllname)
    {
        return base.Channel.ImageBaseAddressRemoteAsync(dllname);
    }

    public void CloseTargetProcessRemote()
    {
        base.Channel.CloseTargetProcessRemote();
    }

    public System.Threading.Tasks.Task CloseTargetProcessRemoteAsync()
    {
        return base.Channel.CloseTargetProcessRemoteAsync();
    }

    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    OpenTargetProcessRemoteResponse IReaderService.OpenTargetProcessRemote(OpenTargetProcessRemoteRequest request)
    {
        return base.Channel.OpenTargetProcessRemote(request);
    }

    public void OpenTargetProcessRemote(string processName, ref System.IntPtr targetProcessHandle, ref int pID)
    {
        OpenTargetProcessRemoteRequest inValue = new OpenTargetProcessRemoteRequest();
        inValue.processName = processName;
        inValue.targetProcessHandle = targetProcessHandle;
        inValue.pID = pID;
        OpenTargetProcessRemoteResponse retVal = ((IReaderService)(this)).OpenTargetProcessRemote(inValue);
        targetProcessHandle = retVal.targetProcessHandle;
        pID = retVal.pID;
    }

    public System.Threading.Tasks.Task<OpenTargetProcessRemoteResponse> OpenTargetProcessRemoteAsync(OpenTargetProcessRemoteRequest request)
    {
        return base.Channel.OpenTargetProcessRemoteAsync(request);
    }

    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    ReadProcessMemoryRemoteResponse IReaderService.ReadProcessMemoryRemote(ReadProcessMemoryRemoteRequest request)
    {
        return base.Channel.ReadProcessMemoryRemote(request);
    }

    public void ReadProcessMemoryRemote(int processHandle, long processBaseAddress, ref byte[] biffer, int size, ref int numberOfBytesRead)
    {
        ReadProcessMemoryRemoteRequest inValue = new ReadProcessMemoryRemoteRequest();
        inValue.processHandle = processHandle;
        inValue.processBaseAddress = processBaseAddress;
        inValue.biffer = biffer;
        inValue.size = size;
        inValue.numberOfBytesRead = numberOfBytesRead;
        ReadProcessMemoryRemoteResponse retVal = ((IReaderService)(this)).ReadProcessMemoryRemote(inValue);
        biffer = retVal.biffer;
        numberOfBytesRead = retVal.numberOfBytesRead;
    }

    public System.Threading.Tasks.Task<ReadProcessMemoryRemoteResponse> ReadProcessMemoryRemoteAsync(ReadProcessMemoryRemoteRequest request)
    {
        return base.Channel.ReadProcessMemoryRemoteAsync(request);
    }

    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    WriteProcessMemoryRemoteResponse IReaderService.WriteProcessMemoryRemote(WriteProcessMemoryRemoteRequest request)
    {
        return base.Channel.WriteProcessMemoryRemote(request);
    }

    public void WriteProcessMemoryRemote(int processHandle, long processBaseAddress, ref byte[] biffer, int size, ref int numberOfBytesWritten)
    {
        WriteProcessMemoryRemoteRequest inValue = new WriteProcessMemoryRemoteRequest();
        inValue.processHandle = processHandle;
        inValue.processBaseAddress = processBaseAddress;
        inValue.biffer = biffer;
        inValue.size = size;
        inValue.numberOfBytesWritten = numberOfBytesWritten;
        WriteProcessMemoryRemoteResponse retVal = ((IReaderService)(this)).WriteProcessMemoryRemote(inValue);
        biffer = retVal.biffer;
        numberOfBytesWritten = retVal.numberOfBytesWritten;
    }

    public System.Threading.Tasks.Task<WriteProcessMemoryRemoteResponse> WriteProcessMemoryRemoteAsync(WriteProcessMemoryRemoteRequest request)
    {
        return base.Channel.WriteProcessMemoryRemoteAsync(request);
    }

    public bool HasActiveHandleRemote()
    {
        return base.Channel.HasActiveHandleRemote();
    }

    public System.Threading.Tasks.Task<bool> HasActiveHandleRemoteAsync()
    {
        return base.Channel.HasActiveHandleRemoteAsync();
    }
}
